from main import call_api, temperature_analysis, temperature_analysis_storage, temperature_analysis_graph
import os
import matplotlib.pyplot as plt

#Tests unitaires pour la fonction d'analyse

def test_temperature_analysis_sortTab():
    temperatures = [17.5, 17.7, 16.6, 15.6, 15.5, 15.5, 14.6, 14.8, 14.8, 15.4, 16.5, 17.4, 16.5, 17.7, 17.6, 18.1, 19.4, 20.4, 20.3, 20.4, 19.7, 18.8, 18.2, 17.4, 16.9, 16.4, 16.1, 15.9, 15.7, 15.7, 15.8, 15.8, 15.6, 15.6, 16.0, 16.0, 17.0, 17.3, 17.8, 17.6, 17.5, 17.8, 18.0, 18.2, 17.7, 16.8, 16.1, 15.5, 15.2, 15.1, 14.7, 14.1, 13.8, 13.8, 14.2, 15.4, 16.6, 17.7, 18.8, 19.7, 20.3, 21.4, 21.5, 22.0, 22.5, 22.1, 21.6, 18.9, 17.4, 16.2, 15.3, 14.5, 13.9, 13.3, 12.8, 12.3, 11.9, 11.9, 13.4, 15.7, 17.9, 19.8, 21.3, 22.5, 23.3, 23.9, 24.1, 24.3, 23.9, 23.3, 23.1, 21.9, 20.5, 19.2, 18.2, 17.5, 16.8, 16.1, 15.5, 15.1, 15.0, 15.1, 15.9, 17.6, 19.9, 21.9, 23.3, 24.4, 25.2, 25.7, 25.9, 25.9, 25.7, 25.2, 24.5, 23.3, 21.8, 20.5, 19.5, 18.8, 18.1, 17.4, 16.8, 16.4, 16.4, 16.7, 17.5, 19.1, 21.2, 23.1, 24.4, 25.5, 26.3, 26.8, 27.2, 27.3, 27.2, 26.8, 26.0, 24.6, 22.9, 21.3, 20.2, 19.4, 18.6, 17.8, 17.1, 16.7, 16.8, 17.2, 18.0, 19.4, 21.3, 23.1, 24.5, 25.8, 26.8, 27.4, 27.8, 27.9, 28.0, 27.8, 27.2, 25.7, 23.7, 21.9, 20.8, 20.0]
    for temperature in temperatures:
        assert type(temperature) is int or float
    array_sorted = sorted(temperatures)
    sorted_array = temperature_analysis(temperatures)[3]

    assert sorted_array == array_sorted
    return sorted_array

def test_temperature_analysis_minTemperature():
    temperatures = [17.5, 17.7, 16.6, 15.6, 15.5, 15.5, 14.6, 14.8, 14.8, 15.4, 16.5, 17.4, 16.5, 17.7, 17.6, 18.1, 19.4, 20.4, 20.3, 20.4, 19.7, 18.8, 18.2, 17.4, 16.9, 16.4, 16.1, 15.9, 15.7, 15.7, 15.8, 15.8, 15.6, 15.6, 16.0, 16.0, 17.0, 17.3, 17.8, 17.6, 17.5, 17.8, 18.0, 18.2, 17.7, 16.8, 16.1, 15.5, 15.2, 15.1, 14.7, 14.1, 13.8, 13.8, 14.2, 15.4, 16.6, 17.7, 18.8, 19.7, 20.3, 21.4, 21.5, 22.0, 22.5, 22.1, 21.6, 18.9, 17.4, 16.2, 15.3, 14.5, 13.9, 13.3, 12.8, 12.3, 11.9, 11.9, 13.4, 15.7, 17.9, 19.8, 21.3, 22.5, 23.3, 23.9, 24.1, 24.3, 23.9, 23.3, 23.1, 21.9, 20.5, 19.2, 18.2, 17.5, 16.8, 16.1, 15.5, 15.1, 15.0, 15.1, 15.9, 17.6, 19.9, 21.9, 23.3, 24.4, 25.2, 25.7, 25.9, 25.9, 25.7, 25.2, 24.5, 23.3, 21.8, 20.5, 19.5, 18.8, 18.1, 17.4, 16.8, 16.4, 16.4, 16.7, 17.5, 19.1, 21.2, 23.1, 24.4, 25.5, 26.3, 26.8, 27.2, 27.3, 27.2, 26.8, 26.0, 24.6, 22.9, 21.3, 20.2, 19.4, 18.6, 17.8, 17.1, 16.7, 16.8, 17.2, 18.0, 19.4, 21.3, 23.1, 24.5, 25.8, 26.8, 27.4, 27.8, 27.9, 28.0, 27.8, 27.2, 25.7, 23.7, 21.9, 20.8, 20.0]
    first_value = sorted(temperatures)[0]
    assert first_value == 11.9
    min_value = temperature_analysis(temperatures)[1]
    assert min_value == first_value

def test_temperature_analysis_maxTemperature():
    temperatures = [17.5, 17.7, 16.6, 15.6, 15.5, 15.5, 14.6, 14.8, 14.8, 15.4, 16.5, 17.4, 16.5, 17.7, 17.6, 18.1, 19.4, 20.4, 20.3, 20.4, 19.7, 18.8, 18.2, 17.4, 16.9, 16.4, 16.1, 15.9, 15.7, 15.7, 15.8, 15.8, 15.6, 15.6, 16.0, 16.0, 17.0, 17.3, 17.8, 17.6, 17.5, 17.8, 18.0, 18.2, 17.7, 16.8, 16.1, 15.5, 15.2, 15.1, 14.7, 14.1, 13.8, 13.8, 14.2, 15.4, 16.6, 17.7, 18.8, 19.7, 20.3, 21.4, 21.5, 22.0, 22.5, 22.1, 21.6, 18.9, 17.4, 16.2, 15.3, 14.5, 13.9, 13.3, 12.8, 12.3, 11.9, 11.9, 13.4, 15.7, 17.9, 19.8, 21.3, 22.5, 23.3, 23.9, 24.1, 24.3, 23.9, 23.3, 23.1, 21.9, 20.5, 19.2, 18.2, 17.5, 16.8, 16.1, 15.5, 15.1, 15.0, 15.1, 15.9, 17.6, 19.9, 21.9, 23.3, 24.4, 25.2, 25.7, 25.9, 25.9, 25.7, 25.2, 24.5, 23.3, 21.8, 20.5, 19.5, 18.8, 18.1, 17.4, 16.8, 16.4, 16.4, 16.7, 17.5, 19.1, 21.2, 23.1, 24.4, 25.5, 26.3, 26.8, 27.2, 27.3, 27.2, 26.8, 26.0, 24.6, 22.9, 21.3, 20.2, 19.4, 18.6, 17.8, 17.1, 16.7, 16.8, 17.2, 18.0, 19.4, 21.3, 23.1, 24.5, 25.8, 26.8, 27.4, 27.8, 27.9, 28.0, 27.8, 27.2, 25.7, 23.7, 21.9, 20.8, 20.0]
    last_value = sorted(temperatures)[len(temperatures) - 1]
    assert last_value == 28.0
    max_value = temperature_analysis(temperatures)[1]
    assert max_value == last_value

#Test d'intÃ©gration pour la fonction d'analyse

def test_temperature_analysis():
    temperatures = [17.5, 17.7, 16.6, 15.6, 15.5, 15.5, 14.6, 14.8, 14.8, 15.4, 16.5, 17.4, 16.5, 17.7, 17.6, 18.1, 19.4, 20.4, 20.3, 20.4, 19.7, 18.8, 18.2, 17.4, 16.9, 16.4, 16.1, 15.9, 15.7, 15.7, 15.8, 15.8, 15.6, 15.6, 16.0, 16.0, 17.0, 17.3, 17.8, 17.6, 17.5, 17.8, 18.0, 18.2, 17.7, 16.8, 16.1, 15.5, 15.2, 15.1, 14.7, 14.1, 13.8, 13.8, 14.2, 15.4, 16.6, 17.7, 18.8, 19.7, 20.3, 21.4, 21.5, 22.0, 22.5, 22.1, 21.6, 18.9, 17.4, 16.2, 15.3, 14.5, 13.9, 13.3, 12.8, 12.3, 11.9, 11.9, 13.4, 15.7, 17.9, 19.8, 21.3, 22.5, 23.3, 23.9, 24.1, 24.3, 23.9, 23.3, 23.1, 21.9, 20.5, 19.2, 18.2, 17.5, 16.8, 16.1, 15.5, 15.1, 15.0, 15.1, 15.9, 17.6, 19.9, 21.9, 23.3, 24.4, 25.2, 25.7, 25.9, 25.9, 25.7, 25.2, 24.5, 23.3, 21.8, 20.5, 19.5, 18.8, 18.1, 17.4, 16.8, 16.4, 16.4, 16.7, 17.5, 19.1, 21.2, 23.1, 24.4, 25.5, 26.3, 26.8, 27.2, 27.3, 27.2, 26.8, 26.0, 24.6, 22.9, 21.3, 20.2, 19.4, 18.6, 17.8, 17.1, 16.7, 16.8, 17.2, 18.0, 19.4, 21.3, 23.1, 24.5, 25.8, 26.8, 27.4, 27.8, 27.9, 28.0, 27.8, 27.2, 25.7, 23.7, 21.9, 20.8, 20.0]
    assert temperature_analysis(temperatures)[3] == [11.9, 11.9, 12.3, 12.8, 13.3, 13.4, 13.8, 13.8, 13.9, 14.1, 14.2, 14.5, 14.6, 14.7, 14.8, 14.8, 15.0, 15.1, 15.1, 15.1, 15.2, 15.3, 15.4, 15.4, 15.5, 15.5, 15.5, 15.5, 15.6, 15.6, 15.6, 15.7, 15.7, 15.7, 15.8, 15.8, 15.9, 15.9, 16.0, 16.0, 16.1, 16.1, 16.1, 16.2, 16.4, 16.4, 16.4, 16.5, 16.5, 16.6, 16.6, 16.7, 16.7, 16.8, 16.8, 16.8, 16.8, 16.9, 17.0, 17.1, 17.2, 17.3, 17.4, 17.4, 17.4, 17.4, 17.5, 17.5, 17.5, 17.5, 17.6, 17.6, 17.6, 17.7, 17.7, 17.7, 17.7, 17.8, 17.8, 17.8, 17.9, 18.0, 18.0, 18.1, 18.1, 18.2, 18.2, 18.2, 18.6, 18.8, 18.8, 18.8, 18.9, 19.1, 19.2, 19.4, 19.4, 19.4, 19.5, 19.7, 19.7, 19.8, 19.9, 20.0, 20.2, 20.3, 20.3, 20.4, 20.4, 20.5, 20.5, 20.8, 21.2, 21.3, 21.3, 21.3, 21.4, 21.5, 21.6, 21.8, 21.9, 21.9, 21.9, 22.0, 22.1, 22.5, 22.5, 22.9, 23.1, 23.1, 23.1, 23.3, 23.3, 23.3, 23.3, 23.7, 23.9, 23.9, 24.1, 24.3, 24.4, 24.4, 24.5, 24.5, 24.6, 25.2, 25.2, 25.5, 25.7, 25.7, 25.7, 25.8, 25.9, 25.9, 26.0, 26.3, 26.8, 26.8, 26.8, 27.2, 27.2, 27.2, 27.3, 27.4, 27.8, 27.8, 27.9, 28.0]
    max_temperature = temperature_analysis(temperatures)[1]
    assert max_temperature == 28.0
    min_temperature = temperature_analysis(temperatures)[0]
    assert min_temperature == 11.9

# Tests unitaires appel API

def test_api_call_single():
    url = "https://api.open-meteo.com/v1/forecast?"
    lat = 48.85
    lon = 2.35
    parameters = f"latitude={lat}&longitude={lon},temperature_2m"
    attendu = [17.5, 17.7, 16.6, 15.6, 15.5, 15.5, 14.6, 14.8, 14.8, 15.4, 16.5, 17.4, 16.5, 17.7, 17.6, 18.1, 19.4, 20.4, 20.3, 20.4, 19.7, 18.8, 18.2, 17.4, 16.9, 16.4, 16.1, 15.9, 15.7, 15.7, 15.8, 15.8, 15.6, 15.6, 16.0, 16.0, 17.0, 17.3, 17.8, 17.6, 17.5, 17.8, 18.0, 18.2, 17.7, 16.8, 16.1, 15.5, 15.2, 15.1, 14.7, 14.1, 13.8, 13.8, 14.2, 15.4, 16.6, 17.7, 18.8, 19.7, 20.3, 21.4, 21.5, 22.0, 22.5, 22.1, 21.6, 18.9, 17.4, 16.2, 15.3, 14.5, 13.9, 13.3, 12.8, 12.3, 11.9, 11.9, 13.4, 15.7, 17.9, 19.8, 21.3, 22.5, 23.3, 23.9, 24.1, 24.3, 23.9, 23.3, 23.1, 21.9, 20.5, 19.2, 18.2, 17.5, 16.8, 16.1, 15.5, 15.1, 15.0, 15.1, 15.9, 17.6, 19.9, 21.9, 23.3, 24.4, 25.2, 25.7, 25.9, 25.9, 25.7, 25.2, 24.5, 23.3, 21.8, 20.5, 19.5, 18.8, 18.1, 17.4, 16.8, 16.4, 16.4, 16.7, 17.5, 19.1, 21.2, 23.1, 24.4, 25.5, 26.3, 26.8, 27.2, 27.3, 27.2, 26.8, 26.0, 24.6, 22.9, 21.3, 20.2, 19.4, 18.6, 17.8, 17.1, 16.7, 16.8, 17.2, 18.0, 19.4, 21.3, 23.1, 24.5, 25.8, 26.8, 27.4, 27.8, 27.9, 28.0, 27.8, 27.2, 25.7, 23.7, 21.9, 20.8, 20.0]

    response = call_api(url, parameters)
    assert response.status_code == 200
    data = response.json()
    assert isinstance(data, dict)
    temperatures = data.get("hourly", {}).get("temperature_2m", [])
    assert isinstance(temperatures, list)
    if temperatures:
        assert isinstance(temperatures[0], (int, float))
    assert temperatures == attendu

# Tests d'intÃ©gration appel API et fonction d'analyse

def test_api_call_with_analysis():
    url = "https://api.open-meteo.com/v1/forecast?"
    lat = 48.85
    lon = 2.35
    parameters = f"latitude={lat}&longitude={lon},temperature_2m"
    attendu = [11.9, 11.9, 12.3, 12.8, 13.3, 13.4, 13.8, 13.8, 13.9, 14.1, 14.2, 14.5, 14.6, 14.7, 14.8, 14.8, 15.0, 15.1, 15.1, 15.1, 15.2, 15.3, 15.4, 15.4, 15.5, 15.5, 15.5, 15.5, 15.6, 15.6, 15.6, 15.7, 15.7, 15.7, 15.8, 15.8, 15.9, 15.9, 16.0, 16.0, 16.1, 16.1, 16.1, 16.2, 16.4, 16.4, 16.4, 16.5, 16.5, 16.6, 16.6, 16.7, 16.7, 16.8, 16.8, 16.8, 16.8, 16.9, 17.0, 17.1, 17.2, 17.3, 17.4, 17.4, 17.4, 17.4, 17.5, 17.5, 17.5, 17.5, 17.6, 17.6, 17.6, 17.7, 17.7, 17.7, 17.7, 17.8, 17.8, 17.8, 17.9, 18.0, 18.0, 18.1, 18.1, 18.2, 18.2, 18.2, 18.6, 18.8, 18.8, 18.8, 18.9, 19.1, 19.2, 19.4, 19.4, 19.4, 19.5, 19.7, 19.7, 19.8, 19.9, 20.0, 20.2, 20.3, 20.3, 20.4, 20.4, 20.5, 20.5, 20.8, 21.2, 21.3, 21.3, 21.3, 21.4, 21.5, 21.6, 21.8, 21.9, 21.9, 21.9, 22.0, 22.1, 22.5, 22.5, 22.9, 23.1, 23.1, 23.1, 23.3, 23.3, 23.3, 23.3, 23.7, 23.9, 23.9, 24.1, 24.3, 24.4, 24.4, 24.5, 24.5, 24.6, 25.2, 25.2, 25.5, 25.7, 25.7, 25.7, 25.8, 25.9, 25.9, 26.0, 26.3, 26.8, 26.8, 26.8, 27.2, 27.2, 27.2, 27.3, 27.4, 27.8, 27.8, 27.9, 28.0]
    response = call_api(url, parameters)
    assert response.status_code == 200
    data = response.json()
    assert isinstance(data, dict)
    temperatures_api = data.get("hourly", {}).get("temperature_2m", [])
    temperatures_analysis = temperature_analysis(temperatures_api)[3]
    assert temperatures_analysis == attendu

# Tests unitaire sauvagarde fichier JSON

def test_jsondata_storage():
    temperatures = [17.5, 17.7, 16.6, 15.6, 15.5, 15.5, 14.6, 14.8, 14.8, 15.4, 16.5, 17.4, 16.5, 17.7, 17.6, 18.1, 19.4, 20.4, 20.3, 20.4, 19.7, 18.8, 18.2, 17.4, 16.9, 16.4, 16.1, 15.9, 15.7, 15.7, 15.8, 15.8, 15.6, 15.6, 16.0, 16.0, 17.0, 17.3, 17.8, 17.6, 17.5, 17.8, 18.0, 18.2, 17.7, 16.8, 16.1, 15.5, 15.2, 15.1, 14.7, 14.1, 13.8, 13.8, 14.2, 15.4, 16.6, 17.7, 18.8, 19.7, 20.3, 21.4, 21.5, 22.0, 22.5, 22.1, 21.6, 18.9, 17.4, 16.2, 15.3, 14.5, 13.9, 13.3, 12.8, 12.3, 11.9, 11.9, 13.4, 15.7, 17.9, 19.8, 21.3, 22.5, 23.3, 23.9, 24.1, 24.3, 23.9, 23.3, 23.1, 21.9, 20.5, 19.2, 18.2, 17.5, 16.8, 16.1, 15.5, 15.1, 15.0, 15.1, 15.9, 17.6, 19.9, 21.9, 23.3, 24.4, 25.2, 25.7, 25.9, 25.9, 25.7, 25.2, 24.5, 23.3, 21.8, 20.5, 19.5, 18.8, 18.1, 17.4, 16.8, 16.4, 16.4, 16.7, 17.5, 19.1, 21.2, 23.1, 24.4, 25.5, 26.3, 26.8, 27.2, 27.3, 27.2, 26.8, 26.0, 24.6, 22.9, 21.3, 20.2, 19.4, 18.6, 17.8, 17.1, 16.7, 16.8, 17.2, 18.0, 19.4, 21.3, 23.1, 24.5, 25.8, 26.8, 27.4, 27.8, 27.9, 28.0, 27.8, 27.2, 25.7, 23.7, 21.9, 20.8, 20.0]
    sorted_temperatures = [11.9, 11.9, 12.3, 12.8, 13.3, 13.4, 13.8, 13.8, 13.9, 14.1, 14.2, 14.5, 14.6, 14.7, 14.8, 14.8, 15.0, 15.1, 15.1, 15.1, 15.2, 15.3, 15.4, 15.4, 15.5, 15.5, 15.5, 15.5, 15.6, 15.6, 15.6, 15.7, 15.7, 15.7, 15.8, 15.8, 15.9, 15.9, 16.0, 16.0, 16.1, 16.1, 16.1, 16.2, 16.4, 16.4, 16.4, 16.5, 16.5, 16.6, 16.6, 16.7, 16.7, 16.8, 16.8, 16.8, 16.8, 16.9, 17.0, 17.1, 17.2, 17.3, 17.4, 17.4, 17.4, 17.4, 17.5, 17.5, 17.5, 17.5, 17.6, 17.6, 17.6, 17.7, 17.7, 17.7, 17.7, 17.8, 17.8, 17.8, 17.9, 18.0, 18.0, 18.1, 18.1, 18.2, 18.2, 18.2, 18.6, 18.8, 18.8, 18.8, 18.9, 19.1, 19.2, 19.4, 19.4, 19.4, 19.5, 19.7, 19.7, 19.8, 19.9, 20.0, 20.2, 20.3, 20.3, 20.4, 20.4, 20.5, 20.5, 20.8, 21.2, 21.3, 21.3, 21.3, 21.4, 21.5, 21.6, 21.8, 21.9, 21.9, 21.9, 22.0, 22.1, 22.5, 22.5, 22.9, 23.1, 23.1, 23.1, 23.3, 23.3, 23.3, 23.3, 23.7, 23.9, 23.9, 24.1, 24.3, 24.4, 24.4, 24.5, 24.5, 24.6, 25.2, 25.2, 25.5, 25.7, 25.7, 25.7, 25.8, 25.9, 25.9, 26.0, 26.3, 26.8, 26.8, 26.8, 27.2, 27.2, 27.2, 27.3, 27.4, 27.8, 27.8, 27.9, 28.0]
    message = "Fichier d'analyse JSON sauvegardÃ© avec succÃ¨s sous le nom 'meteo.json' !"
    json_analysis = temperature_analysis_storage([sorted_temperatures[0], sorted_temperatures[len(temperatures) - 1], temperatures[2], sorted_temperatures])
    assert json_analysis == message
    with open('meteo.json', 'r') as f:
        content = f.read()
        assert type(content) is str
    with open('meteo.json', 'r') as f_json:
        file_content = f_json.read()
    expected_json = '{"min_temperature": 11.9, "max_temperature": 28.0, "initial_temperatures": [17.5, 17.7, 16.6, 15.6, 15.5, 15.5, 14.6, 14.8, 14.8, 15.4, 16.5, 17.4, 16.5, 17.7, 17.6, 18.1, 19.4, 20.4, 20.3, 20.4, 19.7, 18.8, 18.2, 17.4, 16.9, 16.4, 16.1, 15.9, 15.7, 15.7, 15.8, 15.8, 15.6, 15.6, 16.0, 16.0, 17.0, 17.3, 17.8, 17.6, 17.5, 17.8, 18.0, 18.2, 17.7, 16.8, 16.1, 15.5, 15.2, 15.1, 14.7, 14.1, 13.8, 13.8, 14.2, 15.4, 16.6, 17.7, 18.8, 19.7, 20.3, 21.4, 21.5, 22.0, 22.5, 22.1, 21.6, 18.9, 17.4, 16.2, 15.3, 14.5, 13.9, 13.3, 12.8, 12.3, 11.9, 11.9, 13.4, 15.7, 17.9, 19.8, 21.3, 22.5, 23.3, 23.9, 24.1, 24.3, 23.9, 23.3, 23.1, 21.9, 20.5, 19.2, 18.2, 17.5, 16.8, 16.1, 15.5, 15.1, 15.0, 15.1, 15.9, 17.6, 19.9, 21.9, 23.3, 24.4, 25.2, 25.7, 25.9, 25.9, 25.7, 25.2, 24.5, 23.3, 21.8, 20.5, 19.5, 18.8, 18.1, 17.4, 16.8, 16.4, 16.4, 16.7, 17.5, 19.1, 21.2, 23.1, 24.4, 25.5, 26.3, 26.8, 27.2, 27.3, 27.2, 26.8, 26.0, 24.6, 22.9, 21.3, 20.2, 19.4, 18.6, 17.8, 17.1, 16.7, 16.8, 17.2, 18.0, 19.4, 21.3, 23.1, 24.5, 25.8, 26.8, 27.4, 27.8, 27.9, 28.0, 27.8, 27.2, 25.7, 23.7, 21.9, 20.8, 20.0], "sorted_temperatures": [11.9, 11.9, 12.3, 12.8, 13.3, 13.4, 13.8, 13.8, 13.9, 14.1, 14.2, 14.5, 14.6, 14.7, 14.8, 14.8, 15.0, 15.1, 15.1, 15.1, 15.2, 15.3, 15.4, 15.4, 15.5, 15.5, 15.5, 15.5, 15.6, 15.6, 15.6, 15.7, 15.7, 15.7, 15.8, 15.8, 15.9, 15.9, 16.0, 16.0, 16.1, 16.1, 16.1, 16.2, 16.4, 16.4, 16.4, 16.5, 16.5, 16.6, 16.6, 16.7, 16.7, 16.8, 16.8, 16.8, 16.8, 16.9, 17.0, 17.1, 17.2, 17.3, 17.4, 17.4, 17.4, 17.4, 17.5, 17.5, 17.5, 17.5, 17.6, 17.6, 17.6, 17.7, 17.7, 17.7, 17.7, 17.8, 17.8, 17.8, 17.9, 18.0, 18.0, 18.1, 18.1, 18.2, 18.2, 18.2, 18.6, 18.8, 18.8, 18.8, 18.9, 19.1, 19.2, 19.4, 19.4, 19.4, 19.5, 19.7, 19.7, 19.8, 19.9, 20.0, 20.2, 20.3, 20.3, 20.4, 20.4, 20.5, 20.5, 20.8, 21.2, 21.3, 21.3, 21.3, 21.4, 21.5, 21.6, 21.8, 21.9, 21.9, 21.9, 22.0, 22.1, 22.5, 22.5, 22.9, 23.1, 23.1, 23.1, 23.3, 23.3, 23.3, 23.3, 23.7, 23.9, 23.9, 24.1, 24.3, 24.4, 24.4, 24.5, 24.5, 24.6, 25.2, 25.2, 25.5, 25.7, 25.7, 25.7, 25.8, 25.9, 25.9, 26.0, 26.3, 26.8, 26.8, 26.8, 27.2, 27.2, 27.2, 27.3, 27.4, 27.8, 27.8, 27.9, 28.0]}'
    assert file_content == expected_json

# Tests d'intÃ©gration de la sauvegarde en JSON des rÃ©sultats d'analyse avec l'appel API et la fonction d'analyse

def test_jsondata_storage_with_analysis_and_api():
    url = "https://api.open-meteo.com/v1/forecast?"
    lat = 48.85
    lon = 2.35
    parameters = f"latitude={lat}&longitude={lon},temperature_2m"

    response = call_api(url, parameters)
    data = response.json()
    temperatures_api = data.get("hourly", {}).get("temperature_2m", [])

    api_analysis = temperature_analysis(temperatures_api)
    message = "Fichier d'analyse JSON sauvegardÃ© avec succÃ¨s sous le nom 'meteo.json' !"
    assert test_jsondata_storage(api_analysis) == message
    with open('meteo.json', 'r') as f:
        content = f.read()
        assert type(content) is str
    with open('meteo.json', 'r') as f_json:
        file_content = f_json.read()
    expected_json = '{"min_temperature": 11.9, "max_temperature": 28.0, "initial_temperatures": [17.5, 17.7, 16.6, 15.6, 15.5, 15.5, 14.6, 14.8, 14.8, 15.4, 16.5, 17.4, 16.5, 17.7, 17.6, 18.1, 19.4, 20.4, 20.3, 20.4, 19.7, 18.8, 18.2, 17.4, 16.9, 16.4, 16.1, 15.9, 15.7, 15.7, 15.8, 15.8, 15.6, 15.6, 16.0, 16.0, 17.0, 17.3, 17.8, 17.6, 17.5, 17.8, 18.0, 18.2, 17.7, 16.8, 16.1, 15.5, 15.2, 15.1, 14.7, 14.1, 13.8, 13.8, 14.2, 15.4, 16.6, 17.7, 18.8, 19.7, 20.3, 21.4, 21.5, 22.0, 22.5, 22.1, 21.6, 18.9, 17.4, 16.2, 15.3, 14.5, 13.9, 13.3, 12.8, 12.3, 11.9, 11.9, 13.4, 15.7, 17.9, 19.8, 21.3, 22.5, 23.3, 23.9, 24.1, 24.3, 23.9, 23.3, 23.1, 21.9, 20.5, 19.2, 18.2, 17.5, 16.8, 16.1, 15.5, 15.1, 15.0, 15.1, 15.9, 17.6, 19.9, 21.9, 23.3, 24.4, 25.2, 25.7, 25.9, 25.9, 25.7, 25.2, 24.5, 23.3, 21.8, 20.5, 19.5, 18.8, 18.1, 17.4, 16.8, 16.4, 16.4, 16.7, 17.5, 19.1, 21.2, 23.1, 24.4, 25.5, 26.3, 26.8, 27.2, 27.3, 27.2, 26.8, 26.0, 24.6, 22.9, 21.3, 20.2, 19.4, 18.6, 17.8, 17.1, 16.7, 16.8, 17.2, 18.0, 19.4, 21.3, 23.1, 24.5, 25.8, 26.8, 27.4, 27.8, 27.9, 28.0, 27.8, 27.2, 25.7, 23.7, 21.9, 20.8, 20.0], "sorted_temperatures": [11.9, 11.9, 12.3, 12.8, 13.3, 13.4, 13.8, 13.8, 13.9, 14.1, 14.2, 14.5, 14.6, 14.7, 14.8, 14.8, 15.0, 15.1, 15.1, 15.1, 15.2, 15.3, 15.4, 15.4, 15.5, 15.5, 15.5, 15.5, 15.6, 15.6, 15.6, 15.7, 15.7, 15.7, 15.8, 15.8, 15.9, 15.9, 16.0, 16.0, 16.1, 16.1, 16.1, 16.2, 16.4, 16.4, 16.4, 16.5, 16.5, 16.6, 16.6, 16.7, 16.7, 16.8, 16.8, 16.8, 16.8, 16.9, 17.0, 17.1, 17.2, 17.3, 17.4, 17.4, 17.4, 17.4, 17.5, 17.5, 17.5, 17.5, 17.6, 17.6, 17.6, 17.7, 17.7, 17.7, 17.7, 17.8, 17.8, 17.8, 17.9, 18.0, 18.0, 18.1, 18.1, 18.2, 18.2, 18.2, 18.6, 18.8, 18.8, 18.8, 18.9, 19.1, 19.2, 19.4, 19.4, 19.4, 19.5, 19.7, 19.7, 19.8, 19.9, 20.0, 20.2, 20.3, 20.3, 20.4, 20.4, 20.5, 20.5, 20.8, 21.2, 21.3, 21.3, 21.3, 21.4, 21.5, 21.6, 21.8, 21.9, 21.9, 21.9, 22.0, 22.1, 22.5, 22.5, 22.9, 23.1, 23.1, 23.1, 23.3, 23.3, 23.3, 23.3, 23.7, 23.9, 23.9, 24.1, 24.3, 24.4, 24.4, 24.5, 24.5, 24.6, 25.2, 25.2, 25.5, 25.7, 25.7, 25.7, 25.8, 25.9, 25.9, 26.0, 26.3, 26.8, 26.8, 26.8, 27.2, 27.2, 27.2, 27.3, 27.4, 27.8, 27.8, 27.9, 28.0]}'
    assert file_content == expected_json

# Test unitaire gÃ©nÃ©ration graphique matplotlib

def test_graph_generation_from_json_file(json):
    message = "Le graphique de tempÃ©rature pour Paris est gÃ©nÃ©rÃ© avec succÃ¨s sous le nom 'meteo.png' !"
    with open('meteo.json', 'r') as f:
        json = f.read()
    assert temperature_analysis_graph(json) == message

# Test d'intÃ©gration gÃ©nÃ©ration graphique matplotlib avec le fichier JSON

def test_graph_generation_with_file_generation_verification():
    message = "Le graphique de tempÃ©rature pour Paris est gÃ©nÃ©rÃ© avec succÃ¨s sous le nom 'meteo.png' !"
    with open('meteo.json', 'r') as f:
        json = f.read()
    assert temperature_analysis_graph(json) == message

    graph_file = 'meteo.png'
    assert os.path.exists(graph_file) is True
    img = plt.imread(graph_file)
    assert img is not None